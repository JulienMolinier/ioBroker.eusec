{
  "version": 3,
  "sources": ["../../src/lib/utils.ts"],
  "sourcesContent": ["import { CommandType, Device } from \"eufy-security-client\";\r\nimport path from \"path\";\r\nimport fse from \"fs-extra\";\r\nimport * as utils from \"@iobroker/adapter-core\";\r\n\r\nimport { ioBrokerLogger } from \"./log\";\r\nimport { euSec } from \"../main\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const setStateChangedAsync = async function(adapter: ioBroker.Adapter, id: string, value: any): ioBroker.SetStateChangedPromise {\r\n    return await adapter.setStateChangedAsync(id, value === undefined || value === null ? null : { val: value, ack: true }).catch();\r\n};\r\n\r\nexport const isEmpty = function(str: string | null | undefined): boolean {\r\n    if (str) {\r\n        if (str.length > 0)\r\n            return false;\r\n        return true;\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const getImageAsHTML = function(data: Buffer, mime = \"image/jpg\"): string {\r\n    if (data && data.length > 0)\r\n        return `<img src=\"data:${mime};base64,${data.toString(\"base64\")}\" style=\"width: auto ;height: 100%;\" />`;\r\n    return \"\";\r\n}\r\n\r\n/*export const getDataFilePath = function(adapter: ioBroker.Adapter, stationSerial: string, folderName: string, fileName: string): string {\r\n    const dir_path = path.join(utils.getAbsoluteInstanceDataDir(adapter), stationSerial, folderName);\r\n    if (!fse.existsSync(dir_path)) {\r\n        fse.mkdirSync(dir_path, {mode: 0o775, recursive: true});\r\n    }\r\n    return path.join(dir_path, fileName);\r\n}*/\r\n\r\nexport const setStateAsync = async function(adapter: ioBroker.Adapter, state_id: string, common_name: string, value: string, role = \"text\", type: \"string\" | \"number\" | \"boolean\" | \"object\" | \"array\" | \"mixed\" | undefined = \"string\"): Promise<void> {\r\n    await adapter.setObjectNotExistsAsync(state_id, {\r\n        type: \"state\",\r\n        common: {\r\n            name: common_name,\r\n            type: type,\r\n            role: role,\r\n            read: true,\r\n            write: false,\r\n        },\r\n        native: {\r\n        },\r\n    });\r\n    await adapter.setStateAsync(state_id, { val: value, ack: true });\r\n}\r\n\r\nexport const removeFiles = function(adapter: ioBroker.Adapter, stationSerial: string, folderName: string, device_sn: string): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const dir_path = path.join(stationSerial, folderName);\r\n            if (await adapter.fileExistsAsync(adapter.namespace, dir_path)) {\r\n                const files = (await adapter.readDirAsync(adapter.namespace, dir_path)).filter(fn => fn.file.startsWith(device_sn));\r\n                try {\r\n                    files.map(filename => adapter.delFileAsync(adapter.namespace, path.join(dir_path, filename.file)));\r\n                } catch (error) {\r\n                }\r\n            }\r\n            resolve();\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\n/*export const moveFiles = function(adapter: ioBroker.Adapter, stationSerial: string, device_sn: string, srcFolderName: string, dstFolderName: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const dirSrcPath = path.join(utils.getAbsoluteInstanceDataDir(adapter), stationSerial, srcFolderName);\r\n            const dirDstPath = path.join(utils.getAbsoluteInstanceDataDir(adapter), stationSerial, dstFolderName);\r\n            if (!fse.existsSync(dirDstPath)) {\r\n                fse.mkdirSync(dirDstPath, {mode: 0o775, recursive: true});\r\n            }\r\n            if (fse.existsSync(dirSrcPath)) {\r\n                const files = fse.readdirSync(dirSrcPath).filter(fn => fn.startsWith(device_sn));\r\n                try {\r\n                    files.map(filename => fse.moveSync(path.join(dirSrcPath, filename), path.join(dirDstPath, filename)));\r\n                } catch (error) {\r\n                }\r\n            }\r\n            resolve();\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}*/\r\n\r\nexport const lowestUnusedNumber = function (sequence: number[], startingFrom: number): number {\r\n    const arr = sequence.slice(0);\r\n    arr.sort((a, b) => a - b);\r\n    return arr.reduce((lowest, num, i) => {\r\n        const seqIndex = i + startingFrom;\r\n        return num !== seqIndex && seqIndex < lowest ? seqIndex : lowest\r\n    }, arr.length + startingFrom);\r\n}\r\n\r\nexport const sleep = async (ms: number): Promise<void> => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n};\r\n\r\nexport const getVideoClipLength = (device: Device): number => {\r\n    let length = 60;\r\n    const workingMode = device.getRawProperty(CommandType.CMD_SET_PIR_POWERMODE);\r\n    if (workingMode !== undefined) {\r\n        switch(workingMode) {\r\n            case \"0\":\r\n                if (device.isCamera2Product() || device.isIndoorCamera() || device.isSoloCameras())\r\n                    length = 20;\r\n                else if (device.isBatteryDoorbell() || device.isBatteryDoorbell2())\r\n                    length = 30;\r\n                break;\r\n            case \"1\":\r\n                // Corrisponds to 60 seconds\r\n                break;\r\n            case \"2\":\r\n                const customValue = device.getRawProperty(CommandType.CMD_DEV_RECORD_TIMEOUT);\r\n                if (customValue !== undefined) {\r\n                    try {\r\n                        length = Number.parseInt(customValue);\r\n                    } catch(error) {\r\n                    }\r\n                }\r\n                break;\r\n            case \"3\":\r\n                // Corrisponds to 60 seconds?? (this mode exists only for battery doorbells; mode: Optimal Battery Life)\r\n                break;\r\n        }\r\n    }\r\n    return length;\r\n};\r\n\r\nexport const removeLastChar = function(text: string, char: string): string {\r\n    const strArr = [...text];\r\n    strArr.splice(text.lastIndexOf(char), 1);\r\n    return strArr.join(\"\");\r\n}\r\n\r\nexport const changeRole = async function(adapter: ioBroker.Adapter, log: ioBrokerLogger, state: string, role: string): Promise<void> {\r\n    try {\r\n        const states = await adapter.getStatesAsync(`*.${state}`);\r\n        if (states)\r\n            Object.keys(states).forEach(async id => {\r\n                await adapter.extendObjectAsync(id, {\r\n                    type: \"state\",\r\n                    common: {\r\n                        role: role\r\n                    }\r\n                }, {}).catch();\r\n            });\r\n    } catch (error) {\r\n        log.error(`state: ${state} role: ${role} - Error:`, error);\r\n    }\r\n};\r\n\r\nexport const deleteStates = async function(adapter: ioBroker.Adapter, property: string): Promise<void> {\r\n    const states = await adapter.getStatesAsync(`*.${property}`);\r\n    if (states)\r\n        Object.keys(states).forEach(async id => {\r\n            await adapter.delObjectAsync(id).catch();\r\n        });\r\n};\r\n\r\nexport const handleUpdate = async function(adapter: euSec, log: ioBrokerLogger, oldVersion: number, newVersion: number): Promise<void> {\r\n    if (oldVersion != 0 && oldVersion <= 0.61) {\r\n        try {\r\n            const all = await adapter.getStatesAsync(\"T*\");\r\n            if (all) {\r\n                Object.keys(all).forEach(async id => {\r\n                    await adapter.delObjectAsync(id, { recursive: false }).catch();\r\n                });\r\n            }\r\n            const channels = await adapter.getChannelsOfAsync();\r\n            if (channels) {\r\n                Object.values(channels).forEach(async channel => {\r\n                    if (channel.common.name !== \"info\") {\r\n                        await adapter.delObjectAsync(channel._id, {recursive: false}).catch();\r\n                    }\r\n                });\r\n            }\r\n            const devices = await adapter.getDevicesAsync();\r\n            if (devices) {\r\n                Object.values(devices).forEach(async device => {\r\n                    await adapter.delObjectAsync(device._id, {recursive: false}).catch();\r\n                });\r\n            }\r\n        } catch (error) {\r\n            log.error(\"Version 0.6.1: Error:\", error);\r\n        }\r\n    }\r\n    if (oldVersion != 0 && oldVersion <= 0.74) {\r\n        try {\r\n            await adapter.setObjectAsync(\"verify_code\", {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"2FA verification code\",\r\n                    type: \"string\",\r\n                    role: \"state\",\r\n                    read: true,\r\n                    write: true,\r\n                },\r\n                native: {},\r\n            });\r\n        } catch (error) {\r\n            log.error(\"Version 0.7.4: Error:\", error);\r\n        }\r\n    }\r\n    if (oldVersion != 0 && oldVersion <= 1) {\r\n        for (const state of [\"last_event_pic_url\", \"last_event_pic_html\", \"last_event_video_url\"]) {\r\n            try {\r\n                await deleteStates(adapter, state);\r\n            } catch (error) {\r\n                log.error(`Version 1.0.0 - ${state}: Error:`, error);\r\n            }\r\n        }\r\n    }\r\n    if (oldVersion == 0 && newVersion == 1.3) {\r\n        const data_dir = utils.getAbsoluteInstanceDataDir(adapter);\r\n        try {\r\n            const file = path.join(data_dir, \"adapter.json\");\r\n            if (fse.statSync(file).isFile()) {\r\n                const fileContent = fse.readFileSync(file, \"utf8\");\r\n                await adapter.writeFileAsync(adapter.namespace, \"adapter.json\", fileContent);\r\n            }\r\n        } catch (error) {\r\n            //log.error(`Version 3.0.0: Error:`, error);\r\n        }\r\n        try {\r\n            const file = path.join(data_dir, \"persistent.json\");\r\n            if (fse.statSync(file).isFile()) {\r\n                const fileContent = fse.readFileSync(file, \"utf8\");\r\n                await adapter.writeFileAsync(adapter.namespace, \"driver.json\", fileContent);\r\n            }\r\n        } catch (error) {\r\n            //log.error(`Version 3.0.0: Error:`, error);\r\n        }\r\n        try {\r\n            fse.removeSync(data_dir);\r\n        } catch (error) {\r\n            //log.error(`Version 3.0.0: Error:`, error);\r\n        }\r\n        adapter.log.warn(\"Migrated configuration files to new location (needs restart). Restart of the adapter initiated.\")\r\n        adapter.restartAdapter();\r\n    }\r\n};\r\n\r\nexport const convertCamelCaseToSnakeCase = function (value: string): string {\r\n    return value.replace(/[A-Z]/g, (letter, index) => {\r\n        return index == 0 ? letter.toLowerCase() : \"_\" + letter.toLowerCase();\r\n    });\r\n};\r\n\r\nexport function getShortUrl(url: URL, prefixUrl?: string): string {\r\n    if (url.password) {\r\n        url = new URL(url.toString()); // prevent original url mutation\r\n        url.password = \"[redacted]\";\r\n    }\r\n    let shortUrl = url.toString();\r\n    if (prefixUrl && shortUrl.startsWith(prefixUrl)) {\r\n        shortUrl = shortUrl.slice(prefixUrl.length);\r\n    }\r\n\r\n    return shortUrl;\r\n}"],
  "mappings": "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",
  "names": ["path", "fse"]
}
